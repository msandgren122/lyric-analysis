artist_names = artist_names[-paren]
# Remove last 3 entries (Wiki headings)
artist_names <- artist_names[1:(length(artist_names)-3)]
# Construct genius.com artist page urls
artist_page <- "https://genius.com/artists/" # Every Genius artist page is found in /artists
urls = c()
for (i in 1:length(artist_names)) {
# Probably not the right way to do this in R
name <- gsub(" ", "-", artist_names[i])
name <- paste(artist_page, name, sep = "")
urls <- c(urls, name)
}
# Loop through each url and see if exists
urls
foo <- "Rappin'-4-Tay"
print(gsub("\', "", foo))
foo <- "Rappin'-4-Tay"
print(gsub("\'", "", foo))
foo <- "Rappin'-4-Tay"
print(gsub("\"", "", foo))
foo <- "Rappin'-4-Tay"
print(gsub("\"", "", foo))
foo <- "Rappin'-4-Tay"
print(gsub("\'", "", foo))
webElems <- chrome$findElements(using = "xpath", value = "//*[@id='mw-content-text']/div/div/ul/li")
artist_names <- unlist(lapply(webElems, function(x){x$getElementText()}))
# Format strings
for (i in 1:length(artist_names)) {
# Remove escape character backslashes
artist_names[i] <- gsub("\"", "", artist_names[i])
# Remove Wiki reference numbers
artist_names[i] <- gsub("\\[\\d\\]", "", artist_names[i])
# Guessing that periods should also be removed
artist_names[i] <- gsub("\\.", "", artist_names[i])
# Remove single quotes
artist_names[i] <- gsub("\'", "", artist_names[i])
# Remove double quotes
#artist_names[i] <- gsub("\"", "", artist_names[i])
# Will also need to clean up other stuff in the URLs once we figure out
# what isn't included
}
artist_names
foo <- "Royce Da 5'9\""
print(gsub("\"", "", foo))
foo <- "Royce Da 5'9\""
foo <- "Royce Da 5'9\""
foo
print(gsub("\"", "", foo))
# Format strings
for (i in 1:length(artist_names)) {
# Remove escape character backslashes
artist_names[i] <- gsub("\"", "", artist_names[i])
# Remove Wiki reference numbers
artist_names[i] <- gsub("\\[\\d\\]", "", artist_names[i])
# Guessing that periods should also be removed
artist_names[i] <- gsub("\\.", "", artist_names[i])
# Remove single quotes
artist_names[i] <- gsub("\'", "", artist_names[i])
# Remove double quotes
#artist_names[i] <- gsub("\"", "", artist_names[i])
# Will also need to clean up other stuff in the URLs once we figure out
# what isn't included
}
artist_names
artist_names[1000:1100]
artist_names <- unlist(lapply(webElems, function(x){x$getElementText()}))
# Format artist names for URLs
for (i in 1:length(artist_names)) {
# Remove escaped double quotes
artist_names[i] <- gsub("\"", "", artist_names[i])
# Remove single quotes
artist_names[i] <- gsub("\'", "", artist_names[i])
# Remove Wiki reference numbers
artist_names[i] <- gsub("\\[\\d\\]", "", artist_names[i])
# Remove periods
artist_names[i] <- gsub("\\.", "", artist_names[i])
}
# Remove artists with parentheticals in heading
paren <- grep("\\(|\\)", artist_names)
artist_names = artist_names[-paren]
# Remove last 3 entries (Wiki headings)
artist_names <- artist_names[1:(length(artist_names)-3)]
# Construct genius.com artist page urls
artist_page <- "https://genius.com/artists/" # Every Genius artist page is found in /artists
urls = c()
for (i in 1:length(artist_names)) {
# Probably not the right way to do this in R
name <- gsub(" ", "-", artist_names[i])
name <- paste(artist_page, name, sep = "")
urls <- c(urls, name)
}
urls
urls[1000:1100]
artist_names <- unlist(lapply(webElems, function(x){x$getElementText()}))
# Format artist names for URLs
for (i in 1:length(artist_names)) {
# Remove escaped double quotes
artist_names[i] <- gsub("\"", "", artist_names[i])
# Remove Wiki reference numbers
artist_names[i] <- gsub("\\[\\d\\]", "", artist_names[i])
artist_names[i] <- gsub("\\.", "", artist_names[i])
artist_names[i] <- gsub("\'", "", artist_names[i])
}
# Remove artists with parentheticals in heading
paren <- grep("\\(|\\)", artist_names)
artist_names = artist_names[-paren]
# Remove last 3 entries (Wiki headings)
artist_names <- artist_names[1:(length(artist_names)-3)]
# Construct genius.com artist page urls
artist_page <- "https://genius.com/artists/" # Every Genius artist page is found in /artists
urls = c()
for (i in 1:length(artist_names)) {
# Probably not the right way to do this in R
name <- gsub(" ", "-", artist_names[i])
name <- paste(artist_page, name, sep = "")
urls <- c(urls, name)
}
urls
library(tidyverse)
library(RSelenium)
# Start a Selenium server and client; set Chrome as the client port
rD <- rsDriver(verbose = FALSE, port = 4444L, browser = "chrome")
chrome <- rD$client
chrome$navigate("https://genius.com/artists/kendrick-lamar")
webElems <- chrome$findElements(using = "xpath", value = "//*[@id='mw-content-text']/div/div/ul/li")
webElems
print(webElems)
chrome$navigate("https://genius.com/artists/kendrick-lamar")
webElems <- chrome$findElements(using = "class name", value = "full_width_button u-clickable u-quarter_top_margin")
webElems <- chrome$findElements(using = "xpath", value = "full_width_button u-clickable u-quarter_top_margin")
webElems <- chrome$findElements(using = "xpath", value = "//*full_width_button u-clickable u-quarter_top_margin")
webElems <- chrome$findElements(using = "class name", value = "full_width_button u-clickable u-quarter_top_margin")
webElems <- chrome$findElements(using = "class name", value = "full_width_button")
webElems
webElems <- chrome$findElements(using = "xpath", value = "/html/body/routable-page/ng-outlet/routable-profile-page/ng-outlet/routed-page/profile-page/div[3]/div[2]/artist-songs-and-albums/album-grid/div[2]/svg/path")
webElems
source('~/Programming/r/rap-analyses/functions.R', echo=TRUE)
chrome$navigate("https://genius.com/artists/kendrick-lamar")
webElems <- chrome$findElements(using = "xpath", value = "/html/body/routable-page/ng-outlet/routable-profile-page/ng-outlet/routed-page/profile-page/div[3]/div[2]/artist-songs-and-albums/album-grid/div[2]")
webElems
webElems <- chrome$findElements(using = "xpath", value = "/html/body/routable-page/ng-outlet/routable-profile-page/ng-outlet/routed-page/profile-page/div[3]/div[2]/artist-songs-and-albums/album-grid/modal-window")
webElems
print(webElems)
print(unlist(lapply(webElems, function(x){x$getElementText()})))
print(unlist(lapply(webElems, function(x){x$getElementText()})))
webElems <- chrome$findElements(using = "xpath", value = "/html/body/routable-page/ng-outlet/routable-profile-page/ng-outlet/routed-page/profile-page/div[3]/div[2]/artist-songs-and-albums/album-grid/div[2]")
print(unlist(lapply(webElems, function(x){x$getElementText()})))
webElems <- chrome$findElements(using = "xpath", value = "/html/body/routable-page/ng-outlet/routable-profile-page/ng-outlet/routed-page/profile-page/div[3]/div[2]/artist-songs-and-albums/album-grid/div[2]/svg/path")
print(unlist(lapply(webElems, function(x){x$getElementText()})))
library(data.table)
library(tidytext)
library(tidyverse)
library(dplyr)
setwd("/Users/zacharysnoek/Programming/r/rap-data")
# Load dataset
initial <- fread("dataset_0.csv", sep2 = "|")
initial[, collaborators := NULL]
# String cleaning
initial <- initial %>%
mutate(lyrics = gsub("\\[.*?\\]", "", lyrics)) %>%
mutate(lyrics = gsub("\\(.*?\\)", "", lyrics)) %>%
mutate(lyrics = gsub("\\\\", "", lyrics))
# Create a list of unique artsts
artists <- initial$artist %>% unique()
# Use a small subset to test with
artists <- artists[1:10]
output = "/Users/zacharysnoek/Programming/r/rap-analyses/png"
simple_wordCount(artists, 50, output)
simple_wordCount(artists, 50, output)
simple_wordCount(artists, 50, output)
simple_wordCount(artists, 50, output)
simple_wordCount <- function(artistData, head, outputDir) {
# Save plots in png
setwd(outputDir)
for (i in 1:length(artistData)) {
#setwd("/Users/zacharysnoek/Programming/r/rap-analyses/png")
# Get the lyrics for each rapper
rapper <- toString(artistData[i])
filtered_df <- filter(initial, artist == rapper)
text <- filtered_df %>%
pull(lyrics)
# Tokenize lyrics
lyrics_df <- as_tibble(text) %>%
unnest_tokens(word, value)
# Remove stop words
data("stop_words")
lyrics_df <- lyrics_df %>%
anti_join(stop_words)
# Include this to filter out naughty words
#'%ni%' <- Negate('%in%')
#nsfw <- c("bitch", "bitches", "fuck", "fuckin", "shit", "damn",
#          "pussy", "nigga", "niggas", "ass", "dick")
#lyrics_df <- filter(lyrics_df, word %ni% nsfw)
# Count unique words for the rapper
word_count <- lyrics_df %>%
count(word, sort = TRUE)
# Create a bar plot of first 50 most occurring words
head <- word_count[1:head,]
# Do some stuff to sort the x axis correctly
head$word <- as.vector(head$word) #get rid of factors
head$word = factor(head$word,head$word) #add ordered factors back
ggplot(head, aes(x = word, y = n)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
filename <- "x.png"
filename <- gsub("x", rapper, filename)
ggsave(filename)
}
}
simple_wordCount(artists, 50, output)
simple_wordCount <- function(artistData, head, outputDir) {
# Save plots in png
setwd(outputDir)
for (i in 1:length(artistData)) {
#setwd("/Users/zacharysnoek/Programming/r/rap-analyses/png")
# Get the lyrics for each rapper
rapper <- toString(artistData[i])
filtered_df <- filter(initial, artist == rapper)
text <- filtered_df %>%
pull(lyrics)
# Tokenize lyrics
lyrics_df <- as_tibble(text) %>%
unnest_tokens(word, value)
# Remove stop words
data("stop_words")
lyrics_df <- lyrics_df %>%
anti_join(stop_words)
# Include this to filter out naughty words
#'%ni%' <- Negate('%in%')
#nsfw <- c("bitch", "bitches", "fuck", "fuckin", "shit", "damn",
#          "pussy", "nigga", "niggas", "ass", "dick")
#lyrics_df <- filter(lyrics_df, word %ni% nsfw)
# Count unique words for the rapper
word_count <- lyrics_df %>%
count(word, sort = TRUE)
# Create a bar plot of first 50 most occurring words
head <- word_count[1:integer(head),]
# Do some stuff to sort the x axis correctly
head$word <- as.vector(head$word) #get rid of factors
head$word = factor(head$word,head$word) #add ordered factors back
ggplot(head, aes(x = word, y = n)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
filename <- "x.png"
filename <- gsub("x", rapper, filename)
ggsave(filename)
}
}
simple_wordCount(artists, 50, output)
simple_wordCount <- function(artistData, n, outputDir) {
# Save plots in png
setwd(outputDir)
for (i in 1:length(artistData)) {
#setwd("/Users/zacharysnoek/Programming/r/rap-analyses/png")
# Get the lyrics for each rapper
rapper <- toString(artistData[i])
filtered_df <- filter(initial, artist == rapper)
text <- filtered_df %>%
pull(lyrics)
# Tokenize lyrics
lyrics_df <- as_tibble(text) %>%
unnest_tokens(word, value)
# Remove stop words
data("stop_words")
lyrics_df <- lyrics_df %>%
anti_join(stop_words)
# Include this to filter out naughty words
#'%ni%' <- Negate('%in%')
#nsfw <- c("bitch", "bitches", "fuck", "fuckin", "shit", "damn",
#          "pussy", "nigga", "niggas", "ass", "dick")
#lyrics_df <- filter(lyrics_df, word %ni% nsfw)
# Count unique words for the rapper
word_count <- lyrics_df %>%
count(word, sort = TRUE)
# Create a bar plot of first 50 most occurring words
head <- word_count[1:n,]
# Do some stuff to sort the x axis correctly
head$word <- as.vector(head$word) #get rid of factors
head$word = factor(head$word,head$word) #add ordered factors back
ggplot(head, aes(x = word, y = n)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
filename <- "x.png"
filename <- gsub("x", rapper, filename)
ggsave(filename)
}
}
simple_wordCount(artists, 50, output)
simple_wordCount <- function(artistData, n, outputDir) {
# Save plots in png
setwd(outputDir)
for (i in 1:length(artistData)) {
#setwd("/Users/zacharysnoek/Programming/r/rap-analyses/png")
# Get the lyrics for each rapper
rapper <- toString(artistData[i])
filtered_df <- filter(initial, artist == rapper)
text <- filtered_df %>%
pull(lyrics)
# Tokenize lyrics
lyrics_df <- as_tibble(text) %>%
unnest_tokens(word, value)
# Remove stop words
data("stop_words")
lyrics_df <- lyrics_df %>%
anti_join(stop_words)
# Include this to filter out naughty words
#'%ni%' <- Negate('%in%')
#nsfw <- c("bitch", "bitches", "fuck", "fuckin", "shit", "damn",
#          "pussy", "nigga", "niggas", "ass", "dick")
#lyrics_df <- filter(lyrics_df, word %ni% nsfw)
# Count unique words for the rapper
word_count <- lyrics_df %>%
count(word, sort = TRUE)
# Create a bar plot of first 50 most occurring words
head <- word_count[1:n,]
# Do some stuff to sort the x axis correctly
head$word <- as.vector(head$word) #get rid of factors
head$word = factor(head$word,head$word) #add ordered factors back
ggplot(head, aes(x = n, y = word)) +
geom_bar(stat = "identity") #+
#theme(axis.text.x = element_text(angle = 65, hjust = 1))
filename <- "x.png"
filename <- gsub("x", rapper, filename)
ggsave(filename)
}
}
simple_wordCount(artists, 50, output)
simple_wordCount <- function(artistData, n, outputDir) {
# Save plots in png
setwd(outputDir)
for (i in 1:length(artistData)) {
#setwd("/Users/zacharysnoek/Programming/r/rap-analyses/png")
# Get the lyrics for each rapper
rapper <- toString(artistData[i])
filtered_df <- filter(initial, artist == rapper)
text <- filtered_df %>%
pull(lyrics)
# Tokenize lyrics
lyrics_df <- as_tibble(text) %>%
unnest_tokens(word, value)
# Remove stop words
data("stop_words")
lyrics_df <- lyrics_df %>%
anti_join(stop_words)
# Include this to filter out naughty words
#'%ni%' <- Negate('%in%')
#nsfw <- c("bitch", "bitches", "fuck", "fuckin", "shit", "damn",
#          "pussy", "nigga", "niggas", "ass", "dick")
#lyrics_df <- filter(lyrics_df, word %ni% nsfw)
# Count unique words for the rapper
word_count <- lyrics_df %>%
count(word, sort = TRUE)
# Create a bar plot of first 50 most occurring words
head <- word_count[1:n,]
# Do some stuff to sort the x axis correctly
head$word <- as.vector(head$word) #get rid of factors
head$word = factor(head$word,head$word) #add ordered factors back
ggplot(head, aes(x = word, y = n)) +
geom_bar(stat = "identity") +
coord_flip()
#theme(axis.text.x = element_text(angle = 65, hjust = 1))
filename <- "x.png"
filename <- gsub("x", rapper, filename)
ggsave(filename)
}
}
simple_wordCount(artists, 50, output)
simple_wordCount <- function(artistData, n, outputDir) {
# Save plots in png
setwd(outputDir)
for (i in 1:length(artistData)) {
#setwd("/Users/zacharysnoek/Programming/r/rap-analyses/png")
# Get the lyrics for each rapper
rapper <- toString(artistData[i])
filtered_df <- filter(initial, artist == rapper)
text <- filtered_df %>%
pull(lyrics)
# Tokenize lyrics
lyrics_df <- as_tibble(text) %>%
unnest_tokens(word, value)
# Remove stop words
data("stop_words")
lyrics_df <- lyrics_df %>%
anti_join(stop_words)
# Include this to filter out naughty words
#'%ni%' <- Negate('%in%')
#nsfw <- c("bitch", "bitches", "fuck", "fuckin", "shit", "damn",
#          "pussy", "nigga", "niggas", "ass", "dick")
#lyrics_df <- filter(lyrics_df, word %ni% nsfw)
# Count unique words for the rapper
word_count <- lyrics_df %>%
count(word, sort = TRUE)
# Create a bar plot of first 50 most occurring words
head <- word_count[1:n,]
# Do some stuff to sort the x axis correctly
# head$word <- as.vector(head$word) #get rid of factors
# head$word = factor(head$word,head$word) #add ordered factors back
ggplot(head, aes(x = word, y = n)) +
geom_bar(stat = "identity") +
coord_flip()
#theme(axis.text.x = element_text(angle = 65, hjust = 1))
filename <- "x.png"
filename <- gsub("x", rapper, filename)
ggsave(filename)
}
}
simple_wordCount(artists, 50, output)
simple_wordCount <- function(data, n, outputDir) {
# Save plots in png
setwd(outputDir)
for (i in 1:length(data)) {
#setwd("/Users/zacharysnoek/Programming/r/rap-analyses/png")
# Get the lyrics for each rapper
rapper <- toString(data[i])
filtered_df <- filter(initial, artist == rapper)
text <- filtered_df %>%
pull(lyrics)
# Tokenize lyrics
lyrics_df <- as_tibble(text) %>%
unnest_tokens(word, value)
# Remove stop words
data("stop_words")
lyrics_df <- lyrics_df %>%
anti_join(stop_words)
# Include this to filter out naughty words
#'%ni%' <- Negate('%in%')
#nsfw <- c("bitch", "bitches", "fuck", "fuckin", "shit", "damn",
#          "pussy", "nigga", "niggas", "ass", "dick")
#lyrics_df <- filter(lyrics_df, word %ni% nsfw)
# Count unique words for the rapper
word_count <- lyrics_df %>%
count(word, sort = TRUE)
# Create a bar plot of first 50 most occurring words
head <- word_count[1:n,]
# Do some stuff to sort the x axis correctly
head$word <- as.vector(head$word) #get rid of factors
head$word = factor(head$word,head$word) #add ordered factors back
ggplot(head, aes(x = word, y = n)) +
geom_bar(stat = "identity") +
coord_flip()
filename <- "x.png"
filename <- gsub("x", rapper, filename)
ggsave(filename)
}
}
simple_wordCount(artists, 50, output)
source("/Users/zacharysnoek/Programming/r/rap-analyses/plots.R")
setwd("/Users/zacharysnoek/Programming/r/rap-data")
# Load dataset
initial <- fread("dataset_0.csv", sep2 = "|")
initial[, collaborators := NULL]
# String cleaning
initial <- initial %>%
mutate(lyrics = gsub("\\[.*?\\]", "", lyrics)) %>%
mutate(lyrics = gsub("\\(.*?\\)", "", lyrics)) %>%
mutate(lyrics = gsub("\\\\", "", lyrics))
# Create a list of unique artsts
artists <- initial$artist %>% unique()
# Use a small subset to test with
artists <- artists[1:10]
output = "/Users/zacharysnoek/Programming/r/rap-analyses/png"
simple_wordCount(artists, 50, output)
library(data.table)
library(tidytext)
library(tidyverse)
library(dplyr)
# Location of rap data
dataDir = "/Users/zacharysnoek/Programming/r/rap-data"
# Location of plots script
plotsScript = "/Users/zacharysnoek/Programming/r/rap-analyses/plots.R"
# Output directory of plots
output = "/Users/zacharysnoek/Programming/r/rap-analyses/png"
source(plotsScript)
setwd(dataDir)
# Load dataset
initial <- fread("dataset_0.csv", sep2 = "|")
initial[, collaborators := NULL]
# String cleaning
initial <- initial %>%
mutate(lyrics = gsub("\\[.*?\\]", "", lyrics)) %>%
mutate(lyrics = gsub("\\(.*?\\)", "", lyrics)) %>%
mutate(lyrics = gsub("\\\\", "", lyrics))
# Create a list of unique artsts
artists <- initial$artist %>% unique()
# Use a small subset to test with
artists <- artists[1:10]
simple_wordCount(artists, 50, output)
# Location of rap data
dataDir = "/Users/zacharysnoek/Programming/r/rap-data"
dataSet = "dataset_1.csv"
# Location of plots script
plotsScript = "/Users/zacharysnoek/Programming/r/rap-analyses/plots.R"
# Output directory of plots
output = "/Users/zacharysnoek/Programming/r/rap-analyses/png"
source(plotsScript)
setwd(dataDir)
# Load dataset
initial <- fread(dataSet, sep2 = "|")
initial[, collaborators := NULL]
# String cleaning
initial <- initial %>%
mutate(lyrics = gsub("\\[.*?\\]", "", lyrics)) %>%
mutate(lyrics = gsub("\\(.*?\\)", "", lyrics)) %>%
mutate(lyrics = gsub("\\\\", "", lyrics))
# Create a list of unique artsts
artists <- initial$artist %>% unique()
# Use a small subset to test with
artists <- artists[1:10]
simple_wordCount(artists, 50, output)
# Create a list of unique artsts
artists <- initial$artist %>% unique()
simple_wordCount(artists, 50, output)
